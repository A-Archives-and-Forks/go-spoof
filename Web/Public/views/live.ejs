<!DOCTYPE html>
<html lang="en">
<head>
  <title>Live Attacker Dashboard</title>
  <link rel="stylesheet" href="/css/styling.css">
  <style>
    #map { height: 400px; border-radius: 10px; margin-top: 20px; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>
<body>

  <div class="container">
    <h1>Live Attacker Dashboard</h1>

    <div class="chart-box"><canvas id="payloadChart"></canvas></div>
    <div class="chart-box"><canvas id="activityChart"></canvas></div>
    <div class="chart-box"><div id="map"></div></div>

  <script>
    const socket = io();

    const payloadData = {};
    const activityLabels = [];
    const activityCounts = [];
    const markers = {};

    const payloadChart = new Chart(document.getElementById('payloadChart').getContext('2d'), {
      type: 'bar',
      data: {
        labels: [],
        datasets: [{
          label: 'Payload Frequency',
          data: [],
          backgroundColor: 'cyan'
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            min: 0,
            max: 100,
            ticks: {
              stepSize: 10
            }
          }
        }
      }

    });

    const activityChart = new Chart(document.getElementById('activityChart').getContext('2d'), {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Attacks Over Time',
          data: [],
          borderColor: 'orange',
          fill: false
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            min: 0,
            max: 100,
            ticks: {
              stepSize: 10
            }
          }
        }
      }

    });

    const map = L.map('map').setView([20, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'OSM contributors'
    }).addTo(map);

    function updateCharts(ip, payload) {
      payloadData[payload] = (payloadData[payload] || 0) + 1;
      payloadChart.data.labels = Object.keys(payloadData);
      payloadChart.data.datasets[0].data = Object.values(payloadData);
      payloadChart.update();

      const now = new Date().toLocaleTimeString();
      activityLabels.push(now);
      activityCounts.push(1);
      if (activityLabels.length > 15) {
        activityLabels.shift();
        activityCounts.shift();
      }
      activityChart.data.labels = activityLabels;
      activityChart.data.datasets[0].data = activityCounts;
      activityChart.update();
    }

    function addToMap(ip) {
      if (markers[ip]) return;

      fetch(`http://ip-api.com/json/${ip}`)
        .then(res => res.json())
        .then(loc => {
          if (loc.status === 'success') {
            const marker = L.marker([loc.lat, loc.lon]).addTo(map);
            marker.bindPopup(`<b>${ip}</b><br>${loc.city}, ${loc.country}`);
            markers[ip] = marker;
          }
        });
    }

    socket.on('new_attack', ({ ip, payload }) => {
      updateCharts(ip, payload);
      addToMap(ip);
    });
  </script>
</body>
</html>
